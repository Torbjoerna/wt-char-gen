{"version":3,"sources":["StatSkillRow.js","App.js","serviceWorker.js","index.js"],"names":["React","memo","id","setPoints","useState","totalCost","setTotalCost","dice","setDice","hardDice","setHardDice","wiggleDice","setWiggleDice","hyperDice","setHyperDice","hyperHardDice","setHyperHardDice","hyperWiggleDice","setHyperWiggleDice","useEffect","total","onClick","style","width","App","setTotal","bodyPoints","setBodyPoints","coordinationPoints","setCoordinationPoints","sensePoints","setSensePoints","mindPoints","setMindPoints","charmPoints","setCharmPoints","commandPoints","setCommandPoints","marginLeft","marginTop","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c47e217.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nconst StatSkillRow = ({id, setPoints}) => {\r\n    const [totalCost, setTotalCost] = useState(0);\r\n    const [dice, setDice] = useState(1);\r\n    const [hardDice, setHardDice] = useState(0);\r\n    const [wiggleDice, setWiggleDice] = useState(0);\r\n    const [hyperDice, setHyperDice] = useState(0);\r\n    const [hyperHardDice, setHyperHardDice] = useState(0);\r\n    const [hyperWiggleDice, setHyperWiggleDice] = useState(0);\r\n    \r\n    useEffect(() => {\r\n        let total = 0;\r\n        total += (dice-1) * 5;\r\n        total += hardDice * 10;\r\n        total += wiggleDice * 20;\r\n        total += hyperDice * 4;\r\n        total += hyperHardDice * 8;\r\n        total += hyperWiggleDice * 16;\r\n        setTotalCost(total);\r\n        setPoints(total);\r\n    });\r\n\r\n    return (\r\n        <tr>\r\n        <td>\r\n            {id}\r\n        </td>\r\n        <td>\r\n        <button onClick={() => setDice(dice-1)}>-</button>\r\n        <strong> {dice} </strong>\r\n        <button onClick={() => setDice(dice+1)}>+</button>\r\n        </td>\r\n        <td>\r\n        <button onClick={() => setHardDice(hardDice-1)}>-</button>\r\n        <strong> {hardDice} </strong>\r\n        <button onClick={() => setHardDice(hardDice+1)}>+</button>\r\n        </td>\r\n        <td>\r\n        <button onClick={() => setWiggleDice(wiggleDice-1)}>-</button>\r\n        <strong> {wiggleDice} </strong>\r\n        <button onClick={() => setWiggleDice(wiggleDice+1)}>+</button>\r\n        </td>\r\n        <td>\r\n        <button onClick={() => setHyperDice(hyperDice-1)}>-</button>\r\n        <strong> {hyperDice} </strong>\r\n        <button onClick={() => setHyperDice(hyperDice+1)}>+</button>\r\n        </td>\r\n        <td>\r\n        <button onClick={() => setHyperHardDice(hyperHardDice-1)}>-</button>\r\n        <strong> {hyperHardDice} </strong>\r\n        <button onClick={() => setHyperHardDice(hyperHardDice+1)}>+</button>\r\n        </td>\r\n        <td>\r\n        <button onClick={() => setHyperWiggleDice(hyperWiggleDice-1)}>-</button>\r\n        <strong> {hyperWiggleDice} </strong>\r\n        <button onClick={() => setHyperWiggleDice(hyperWiggleDice+1)}>+</button>\r\n        </td>\r\n        <td style={{width:'150px'}}>\r\n            <strong>{dice + hyperDice}d</strong>\r\n            {hardDice + hyperHardDice > 0 && <strong>+ {hardDice + hyperHardDice}hd</strong>}\r\n            {wiggleDice + hyperWiggleDice > 0 && <strong>+ {wiggleDice + hyperWiggleDice}wd</strong>}\r\n        </td>\r\n        <td>{totalCost} points</td>\r\n    </tr>\r\n    );\r\n}\r\n\r\nexport default React.memo(StatSkillRow);","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport StatSkillRow from './StatSkillRow';\n\nconst App = () => {\n\n    const [total, setTotal] = useState(0);\n    const [bodyPoints, setBodyPoints] = useState(0);\n    const [coordinationPoints, setCoordinationPoints] = useState(0);\n    const [sensePoints, setSensePoints] = useState(0);\n    const [mindPoints, setMindPoints] = useState(0);\n    const [charmPoints, setCharmPoints] = useState(0);\n    const [commandPoints, setCommandPoints] = useState(0);\n\n    useEffect(() => {\n        setTotal(bodyPoints + coordinationPoints + sensePoints + mindPoints + charmPoints + commandPoints);\n    }, [bodyPoints, coordinationPoints, sensePoints, mindPoints, charmPoints, commandPoints]);\n    \n  return (\n    <div style={{marginLeft:'80px', marginTop:'50px'}}>\n        <div style={{fontSize:'2rem', marginLeft:'250px'}}>Total cost: {total}</div>\n        <table>\n            <thead>\n                <tr>\n                    <td>Stat</td>\n                    <td>d</td>\n                    <td>hd</td>\n                    <td>wd</td>\n                    <td>Hyper d</td>\n                    <td>Hyper hd</td>\n                    <td>Hyper wd</td>\n                    <td>dice</td>\n                    <td>Cost</td>\n                </tr>\n            </thead>\n            <tbody>\n                <StatSkillRow id={'Body'} setPoints={setBodyPoints}/>\n                <StatSkillRow id={'Coordination'} setPoints={setCoordinationPoints}/>\n                <StatSkillRow id={'Sense'} setPoints={setSensePoints}/>\n                <StatSkillRow id={'Mind'} setPoints={setMindPoints}/>\n                <StatSkillRow id={'Charm'} setPoints={setCharmPoints}/>\n                <StatSkillRow id={'Command'} setPoints={setCommandPoints}/>\n            </tbody>\n        </table>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}